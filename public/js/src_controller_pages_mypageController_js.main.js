"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunklistapp"] = self["webpackChunklistapp"] || []).push([["src_controller_pages_mypageController_js"],{

/***/ "./src/controller/pages/mypageController.js":
/*!**************************************************!*\
  !*** ./src/controller/pages/mypageController.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"showMypage\": () => (/* binding */ showMypage),\n/* harmony export */   \"mode\": () => (/* binding */ mode)\n/* harmony export */ });\n// マイページ\nconst showMypage = () => {\n    // ajaxでHTMLを挿入\n    const request = new XMLHttpRequest();\n    request.open('GET', '/template/mypage.html', true);\n    request.onload = () => {\n        if (request.status >= 200 && request.status < 400) {\n            const restxt=request.responseText;\n\t\t\tdocument.getElementById('main').innerHTML = restxt;\n\n            showMypage__();\n        }\n    };\n    request.send();\n}\n\nlet mode;\nlet userData = [];\nlet preUserData = [];\nlet list = [];\nlet preList = [];\nlet yetList = [];\nlet doneList = [];\n\nconst showMypage__ = async () => {\n    setMode('view');\n\n    const { getAuth, onAuthStateChanged } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_firebase_app_dist_esm_index_esm2017_js\"), __webpack_require__.e(\"vendors-node_modules_firebase_auth_dist_index_esm_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! firebase/auth */ \"./node_modules/firebase/auth/dist/index.esm.js\"));\n    const { routing } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../commonController */ \"./src/controller/commonController.js\"));\n\n    // ---------- マイページアクセス時 ----------\n    // ログイン状態の確認\n    onAuthStateChanged(getAuth(), (user) => {\n        if (user && location.pathname === '/mypage'){\n\n            // プロフィールの取得\n            (async () => {\n                const { getUserData } = await __webpack_require__.e(/*! import() */ \"src_model_userModel_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../model/userModel */ \"./src/model/userModel.js\"));\n                userData = await getUserData(user.uid);\n                preUserData = JSON.stringify(userData);\n                preUserData = JSON.parse(preUserData);\n\n                const providerData = user.reloadUserInfo.providerUserInfo[0];\n                userData.user_name = providerData.displayName;\n                userData.user_icon = providerData.photoUrl;\n                userData.twitter_disp_id = providerData.screenName;\n\n                const { setUserData } = await __webpack_require__.e(/*! import() */ \"src_view_pages_mypageView_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../view/pages/mypageView */ \"./src/view/pages/mypageView.js\"));\n                setUserData(userData);\n            })();\n            \n            // 登録リストの取得\n            (async () => {\n                const { getLists } = await __webpack_require__.e(/*! import() */ \"src_model_listModel_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../model/listModel */ \"./src/model/listModel.js\"));\n                list = await getLists(user.uid);\n                setLists();\n\n                if (list.length == 0) {\n                    document.getElementById('my-list-unregistered').style.display = 'block';\n                } else {\n                    document.getElementById('my-list-unregistered').style.display = 'none';\n                }\n    \n                preList = JSON.stringify(list);\n                preList = JSON.parse(preList);\n            })();\n            \n            setEvents(user.uid);\n        } else {\n            routing('');\n        }\n    });\n}\n\n// 表示モード切り替え処理\nconst setMode = async (_mode) => {\n    const { setView } = await __webpack_require__.e(/*! import() */ \"src_view_pages_mypageView_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../view/pages/mypageView */ \"./src/view/pages/mypageView.js\"));\n    mode = _mode;\n    setView(_mode);\n} \n\n// listをHTMLに追加\nconst setLists = async () => {\n    document.getElementById('yet-list-container').innerHTML = '';\n    document.getElementById('done-list-container').innerHTML = '';\n\n    yetList = list.filter(item => !item.check && !item.remove);\n    yetList.sort((a, b) => a.order - b.order);\n    yetList.forEach((item, index) => {\n        item.order = index;\n        addList(item.iid, item.name, item.check);\n    });\n\n    doneList = list.filter(item => item.check && !item.remove);\n    const { Timestamp } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_firebase_app_dist_esm_index_esm2017_js\"), __webpack_require__.e(\"vendors-node_modules_firebase_firestore_dist_index_esm_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! firebase/firestore */ \"./node_modules/firebase/firestore/dist/index.esm.js\"));\n    // チェック日がnullの時は現在の日時を仮に代入\n    doneList = doneList.map(item => {\n        if (item.check_date == null) {\n            item.check_date = Timestamp.now();\n            return item;\n        } else {\n            return item;\n        }\n    })\n    doneList.sort((a, b) => a.check_date - b.check_date);\n    doneList.forEach(item => {\n        addList(item.iid, item.name, item.check);\n    });\n}\n\n// イベント処理設定\nconst setEvents = async (uid) => {\n    // ---------- 共有ボタン押下時 ----------\n    document.getElementById('my-share-button-img').onclick = async () => {\n        document.getElementById('my-popup').style.display = 'flex';\n    };\n\n    // ---------- 編集ボタン押下時 ----------\n    document.getElementById('my-edit-button-img').onclick = () => {\n        setMode('edit');\n    };\n\n    // タイトル編集時\n    const title = document.getElementById('my-title');\n    document.getElementById('my-title').oninput = (e) => {\n        userData.list_title = e.target.value;\n    }\n    \n    // bio編集時\n    const text = document.getElementById('my-bio-text');\n    document.getElementById('my-bio-textarea').oninput = (e) => {\n        if (e.target.offsetHeight < e.target.scrollHeight) {\n            e.target.style.height = e.target.scrollHeight + 'px';\n        }\n        userData.user_bio = e.target.value;\n    }\n\n    // ---------- +ボタン押下時 ----------\n    document.getElementById('add-list-wrapper').onclick = () => {\n        document.getElementById('my-text-edit-area').value = \"\";\n        setMode('add');\n    };\n\n    // ---------- 追加ボタン押下時 ----------\n    let tmp_id = 0;\n    document.getElementById('my-add-submit-button').onclick = async () => {\n        let newlist = document.getElementById('my-text-edit-area').value;\n        if (newlist) {\n            yetList.push({\n                iid: tmp_id.toString(),\n                name: newlist,\n                check: false,\n                remove: false,\n                order: yetList.length\n            })\n            addList(tmp_id.toString(), newlist, false);\n            tmp_id++;\n        }\n        setMode('edit');\n    };\n\n    // ---------- リネーム完了ボタン押下時 ----------\n    document.getElementById('my-rename-submit-button').onclick = async () => {\n        let newname = document.getElementById('my-text-edit-area');\n        if (newname.value) {\n            const find = yetList.find(item => item.iid === newname.name);\n            find.name = newname.value;\n            document.querySelector('#iid-' + newname.name + ' .list-text-box').innerHTML = newname.value;\n        }\n        setMode('edit');\n    };\n\n    // ---------- キャンセルボタン押下時 ----------\n    document.getElementById('my-input-cancel').onclick = async () => {\n        setMode('edit');\n    };\n\n    // ---------- 編集キャンセルボタン押下時 ----------\n    document.getElementById('my-edit-cancel-button-img').onclick = async () => {\n        list = JSON.stringify(preList);\n        list = JSON.parse(list);\n        setLists();\n        setMode('view');\n    };\n\n    // ---------- 完了ボタン押下時 ----------\n    document.getElementById('my-save-button-img').onclick = async () => {\n        // order書き換え\n        const yetListNodes = document.getElementById('yet-list-container').children;\n        const nodesNum = yetListNodes.length;\n        for (let i = 0; i < nodesNum; i++) {\n            const find = yetList.find(({iid}) => iid === yetListNodes[i].id.substr(4))\n            find.order = nodesNum - i - 1;\n        }\n        \n        // リストデータ保存\n        const { saveData } = await __webpack_require__.e(/*! import() */ \"src_model_listModel_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../model/listModel */ \"./src/model/listModel.js\"));\n        await saveData(uid, yetList, doneList);\n        list = yetList.concat(doneList);\n        const { checkUserData, updateUserData} = await __webpack_require__.e(/*! import() */ \"src_model_userModel_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../model/userModel */ \"./src/model/userModel.js\"));\n        if (checkUserData(preUserData, userData)) {\n            updateUserData(userData);\n        }\n        document.getElementById('my-popup').style.display = 'flex';\n\n        if (list.length == 0) {\n            document.getElementById('my-list-unregistered').style.display = 'block';\n        } else {\n            document.getElementById('my-list-unregistered').style.display = 'none';\n        }\n\n        setLists();\n        setMode('view');\n\n        // 登録リストの取得\n        setTimeout( async () => {\n            const { getLists } = await __webpack_require__.e(/*! import() */ \"src_model_listModel_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../model/listModel */ \"./src/model/listModel.js\"));\n            list = await getLists(uid);\n            yetList = list.filter(item => !item.check && !item.remove);\n        }, 1000);\n    };\n\n    document.getElementById('my-popup-twitter').onclick = () => {\n        document.getElementById('my-popup').style.display = 'none';\n        const url = \"https://campa-room.web.app/show/\" + uid;\n        const text = \"行きたいとこリストを更新しました!\";\n        const hashtag = \"行きたいとこリスト\";\n        location.href = 'http://twitter.com/share?url=' + url + '&text=' + text + '&hashtags=' + hashtag;\n    };\n\n    document.getElementById('my-popup-copylink').onclick = () => {\n        document.getElementById('my-popup').style.display = 'none';\n        navigator.clipboard.writeText(\"https://campa-room.web.app/show/\" + uid);\n    };\n\n    document.getElementById('my-popup-close').onclick = () => {\n        document.getElementById('my-popup').style.display = 'none';\n    };\n}\n\nconst addList = async (iid, name, check) => {\n    const yetListContainer = document.getElementById('yet-list-container');\n    const doneListContainer = document.getElementById('done-list-container');\n\n    const listParent = document.createElement('div');\n    listParent.setAttribute('class', 'list-parent');\n    listParent.setAttribute('id', 'iid-' + iid);\n\n    const listDelete = document.createElement('div');\n    listDelete.setAttribute('class', 'list-delete-button');\n    listParent.appendChild(listDelete);\n\n    const deleteText = document.createTextNode('削除');\n    listDelete.appendChild(deleteText);\n\n    const listWrapper = document.createElement('div');\n    listWrapper.setAttribute('class', 'list-wrapper');\n    listParent.appendChild(listWrapper);\n\n    const checkBox = document.createElement('img');\n    if (check) {\n        checkBox.setAttribute('src', '/data/done.svg');\n        checkBox.setAttribute('class', 'list-check-box-done');\n    } else {\n        checkBox.setAttribute('src', '/data/yet.svg');\n        checkBox.setAttribute('class', 'list-check-box-yet');\n\n        checkBox.onclick = () => {\n            if (mode == 'edit') {\n                const find = yetList.find(item => item.iid === iid);\n                if (find.check) {\n                    checkBox.setAttribute('src', '/data/yet.svg');\n                    find.check = false;\n                } else {\n                    checkBox.setAttribute('src', '/data/done.svg');\n                    find.check = true;\n                }\n            }\n        };\n    }\n\n    listWrapper.appendChild(checkBox);\n\n    const textBox = document.createElement('div');\n    if (check) {\n        textBox.setAttribute('class', 'list-text-box');\n    } else {\n        textBox.setAttribute('class', 'list-text-box my-editable');\n    }\n\n    const listText = document.createTextNode(name);\n    textBox.appendChild(listText);\n\n    // チェック有無で表示切り替え\n    if (check) {\n        textBox.style.color = '#C3C3C3';\n    } else {\n        textBox.style.color = '#000';\n    }\n    listWrapper.appendChild(textBox);\n\n    // 並べ替えボタン\n    if (!check) {\n        const sortButton = document.createElement('img');\n        sortButton.setAttribute('src', '/data/sort.svg');\n        sortButton.setAttribute('class', 'list-sort-button my-edit-mode');\n        listWrapper.appendChild(sortButton);\n\n        let touchX, touchY, move, moveY, sortY;\n        window.onresize = () => {\n            move = false;\n        }\n        sortButton.ontouchstart = (e) => {\n            touchX = e.touches[0].clientX;\n            touchY = e.touches[0].pageY;\n            move = true;\n            moveY = 0;\n            sortY = 0;\n            document.documentElement.style.overflow = 'hidden';\n            document.body.style.overflow = 'hidden';\n        }\n        sortButton.ontouchmove = (e) => {\n            if (mode === 'edit') {\n                if (move) {\n                    listParent.style.zIndex = 1;\n                    moveY = e.touches[0].pageY - touchY + sortY;\n                    if (listParent == yetListContainer.firstChild && moveY < 0) {\n                        moveY = 0;\n                    } else\n                    if (listParent == yetListContainer.lastChild && 0 < moveY) {\n                        moveY = 0;\n                    } else\n                    if (moveY < -60) {\n                        sortY += 60;\n                        const prevList = listParent.previousElementSibling;\n                        let topDist = -60;\n                        const sortAnim = () => {\n                            if (-10 < topDist) {\n                                topDist = 0;\n                            } else {\n                                requestAnimationFrame(sortAnim);\n                                topDist += 10;\n                            }\n                            prevList.style.top = topDist + 'px';\n                        }\n                        sortAnim();\n                        yetListContainer.insertBefore(listParent, prevList);\n                    } else\n                    if (60 < moveY) {\n                        sortY -= 60;\n                        const nextList = listParent.nextElementSibling;\n                        let topDist = 60;\n                        const sortAnim = () => {\n                            if (topDist < 10) {\n                                topDist = 0;\n                            } else {\n                                requestAnimationFrame(sortAnim);\n                                topDist -= 10;\n                            }\n                            nextList.style.top = topDist + 'px';\n                        }\n                        sortAnim();\n                        yetListContainer.insertBefore(listParent, nextList.nextSibling);\n                    }\n                    listParent.style.top = moveY + 'px';\n                }\n            }\n        }\n        sortButton.ontouchend = () => {\n            document.documentElement.style.overflow = 'auto';\n            document.body.style.overflow = 'auto';\n            listParent.style.top = 0;\n            listParent.style.zIndex = 0;\n        }\n    }\n\n    // 場所の名前変更\n    if (!check) {\n        textBox.onclick = () => {\n            if (mode === 'edit') {\n                const find = yetList.find(item => item.iid === iid);\n                document.getElementById('my-text-edit-area').value = find.name;\n                document.getElementById('my-text-edit-area').name = iid;\n                setMode('rename');\n            }\n        }\n    }\n\n    // リストをスライドで削除ボタン表示\n    listWrapper.ontouchstart = (e) => {\n        listWrapper.style.background = '#EEE';\n\n        const prePosX = listWrapper.offsetLeft;\n        const touchX = e.touches[0].clientX;\n        const touchY = e.touches[0].pageY;\n        let move = true;\n        listWrapper.ontouchmove = (e) => {\n\n            if (mode === 'edit') {\n                if (50 < Math.abs(e.touches[0].pageY - touchY)) {\n                    move = false;\n                    listWrapper.style.left = '0px';\n                }\n                if (move) {\n                    let moveX = prePosX + e.touches[0].clientX - touchX;\n                    if (-100 < moveX && moveX < 0) {\n                        listWrapper.style.left = moveX + 'px';\n                    }\n                }\n            }\n        };\n\n        listWrapper.ontouchend = () => {\n            listWrapper.style.background = '#FFF';\n            if (mode === 'edit') {\n                if (listWrapper.offsetLeft < 0) {\n                    const slideAnim = () => {\n                        if (-3 < listWrapper.offsetLeft) {\n                            listWrapper.style.left = '0px';\n                        } else \n                        if (-50 < listWrapper.offsetLeft) {\n                            requestAnimationFrame(slideAnim);\n                            listWrapper.style.left = listWrapper.offsetLeft + 5 + 'px';\n                        } else \n                        if (-100 < listWrapper.offsetLeft) {\n                            requestAnimationFrame(slideAnim);\n                            listWrapper.style.left = listWrapper.offsetLeft - 5 + 'px';\n                        } else {\n                            listWrapper.style.left = -100 + 'px';\n                        }\n                    }\n                    slideAnim();\n                }\n            }\n        };\n    };\n\n    // リスト削除ボタン押下時\n    listDelete.onclick = () => {\n        const find1 = yetList.find(item => item.iid === listDelete.parentElement.id.substr(4));\n        if (find1 !== undefined) {\n            find1.remove = true;\n        } else {\n            const find2 = doneList.find(item => item.iid === listDelete.parentElement.id.substr(4));\n            find2.remove = true;\n        }\n\n        let height = 60;\n        const deleteAnim = () => {\n            if (0 < height) {\n                requestAnimationFrame(deleteAnim);\n            } else {\n                listDelete.parentElement.style.display = 'none';\n            }\n\n            listWrapper.style.left = listWrapper.offsetLeft - 20 + 'px';\n            height -= 5;\n            listDelete.parentElement.style.height = height + 'px';\n        }\n        deleteAnim();\n    }\n\n    // 別の場所をタップされたら削除ボタンを隠す\n    document.addEventListener('touchstart', (e) => {\n        if (e.target !== listDelete && e.target !== listWrapper) {\n            const fadeAnim = () => {\n                if (-3 < listWrapper.offsetLeft) {\n                    listWrapper.style.left = '0px';\n                } else {\n                    requestAnimationFrame(fadeAnim);\n                    listWrapper.style.left = listWrapper.offsetLeft + 10 + 'px';\n                }\n            }\n            fadeAnim();\n        } \n    });\n\n    if (check) {\n        doneListContainer.insertBefore(listParent, doneListContainer.firstChild);\n    } else {\n        yetListContainer.insertBefore(listParent, yetListContainer.firstChild);\n    }\n}\n\n//# sourceURL=webpack://listapp/./src/controller/pages/mypageController.js?");

/***/ })

}]);